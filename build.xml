<project name="Hanson Photo Group" default="help" basedir=".">
  <description>
    Automates portions of a photo delivery workflow.
	Runs Photoshop automation routines, such as creating layer composites.
	Creates a HTML web site and other deliverables after processing photos in Photoshop.
  </description>

  <!-- Grab the URL property from the name of the properties file... -->
  <!-- <basename property="URL" file="${props}" suffix=".txt"/> -->
  <!-- ...and grab the remaining properties from inside the file. -->
  <property file="${props}"/>
  <property name="template" value="template"/>
  <property name="build"  value="build"/>
  <property name="staging"  value="${build}\staging"/>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  <tstamp/>
  <path id="antclasspath"> 
    <fileset dir="C:\apache\apache-ant-1.10.5\lib"> 
        <include name="postgresql-42.2.5.jar"/> 
    </fileset> 
  </path> 
  
  <target name="help">
	  <echo>
      These Ant targets automate portions of a photo delivery workflow.
	  Run Photoshop automation routines, such as creating layer composites.
	  Create an HTML web page/site and other deliverables after processing photos in Photoshop.

	  Calling Targets:
	  
	  Point to a properties file and call various targets, such as 'resize', 
	  or a series of targets, such as 'web invoice upload'.
	  
	  Examples: 
	  
	  >ant -Dprops=properties\MYJOB.txt resize
	  >ant -Dprops=properties\MYJOB.txt web invoice upload
	  
	  Targets:
	  
	  - copy - Copies from the image card to the computer. 
	    Creates a helpful folder structure for manual image editing and curation.
	  - resize - After curation, resize the images to standard pixel sizes. 
	    The resultant resized images are consumed by various next targets: luminosity, flash, web, etc.
	  - web - Creates a web site and zip files for distribution of the final product.
	  - invoice - Creates a PDF invoice.
	  - show - Opens a browser and brings up the web site, both a local and the assumed live one.
	  - upload - Opens a browser (to the target upload area) 
	    and a Windows explorer to the local directory - for easy drag-and-drop. 
	    Legacy targets would perform the FTP upload, 
        but Yahoo discontinued the API, I imagine for security reasons.  
	  - flyer-make, flyer-save, and flyer-deploy - Flyer creation and deployment to the index.html page.
	  </echo>
  </target>
  
  <target name="echo">
    <echoproperties destfile="current.properties" format="xml"/>
    <echo>Property file, $${props}: ${props}</echo>
    <echo>URL: ${URL}</echo>
    <echo>ROOT_PATH: ${ROOT_PATH}</echo>
    <echo>RESIZE_PATH: ${RESIZE_PATH}</echo>
    <echo>ClientName: ${AGENT}</echo>
  </target>
  
  <target name="validate" description="Throws an informative error if the proerties are messed up. Like if URL is missing, or has a trailing white space">
	   <fail message="I can't find the properties file: ./${props}">
		 <condition>
		   <not>
			<resourceexists>
			  <file file="./${props}"/>
			</resourceexists>
		   </not>
		 </condition>
	  </fail>
	  <fail message="I can't find image root directory, which you have set to ${ROOT_PATH} Typically a hard coded absolute path, like C:/Users/steve/Pictures/RealEstate.">
		 <condition>
		  <not>
           <available file="${ROOT_PATH}" type="dir"/>
		  </not>
       </condition>
	  </fail>
      <fail message="The URL property is not set.">
		 <condition>
		   <not>
			 <isset property="URL"/>
		   </not>
		 </condition>
	   </fail>
  </target>
  
    <target name="copy" 
		depends="devenv" 
		description="Creates the directory and copies images from camera/card into it.">
      <input message="*** Please Enter Card Letter ***:" addproperty="CARD" />
      <mkdir dir="${ROOT_PATH}/${URL}/cr2"/>
      <mkdir dir="${ROOT_PATH}/${URL}/mp4"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/3"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/7"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/9"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/handheld"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/luminosity-layers"/>
      <mkdir dir="${ROOT_PATH}/${URL}/jpg/flash-layers"/>
	  <!--
      <mkdir dir="${LUMINOSITY_PATH}"/>
      <mkdir dir="${FLASH_PATH}"/>
      -->
      <mkdir dir="${ROOT_PATH}/${URL}/best"/>
      <copy todir="${ROOT_PATH}/${URL}/jpg/7" flatten="true" verbose="true" failonerror="no">
          <fileset dir="${CARD}:/">
              <include name="**/*.JPG"/>
          </fileset>
      </copy>
      <copy todir="${ROOT_PATH}/${URL}/cr2" flatten="true" verbose="true" failonerror="no">
          <fileset dir="${CARD}:/">
              <include name="**/*.CR2"/>
          </fileset>
      </copy>
      <copy todir="${ROOT_PATH}/${URL}/mp4" flatten="true" verbose="true" failonerror="no">
          <fileset dir="${CARD}:/">
              <include name="**/*.MP4"/>
          </fileset>
      </copy>
      <copy todir="${ROOT_PATH}/${URL}/mp4" flatten="true" verbose="true" failonerror="no">
          <fileset dir="${CARD}:/">
              <include name="**/*.MOV"/>
          </fileset>
      </copy>
<!--
	  <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
                <arg line="'C:\Program Files\Adobe\Adobe Bridge CS6 (64 Bit)\bridge.exe'" />
      </exec>
-->
  </target>

  <target name="show">
        <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
                <arg line="/C start chrome '${basedir}/${build}/${URL}/index.html'" />
        </exec>
        <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
                <arg line="/C start chrome 'https://s3.amazonaws.com/aws-website-hansonphotogroup-2pp1h/RealEstate/${URL}/index.html'" />
        </exec>		
        <!--
        <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
                <arg line="/C start chrome 'https://s3-us-west-2.amazonaws.com/hansonphotogroup/${URL}/index.html'" />
        </exec>		
        -->
  </target>

  <target name="upload">
        <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
			<arg line="/C start chrome 'https://console.aws.amazon.com/s3/buckets/aws-website-hansonphotogroup-2pp1h/RealEstate/?'" />
			<arg line="/C 'https://console.aws.amazon.com/s3/buckets/aws-website-hansonphotogroup-2pp1h/RealEstate/${URL}/?'" />
			<!--<arg line="/C start chrome 'https://console.aws.amazon.com/s3/buckets/hansonphotogroup/?'" />-->
        </exec>
		<sleep seconds="5"/>
        <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
                <arg line="/C start .\${build}" />
        </exec>		
  </target>
  
  <target name="resize" depends="validate,clean-resize,make-js-prop-file" description="Calls the Photoshop script.">
    <echo message="${RESIZE_PATH}"/>
      <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-resize-done-xxx.jpg"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
          <available file="build_props.jsx"/>
    </waitfor>
      <!-- ****** Call the JS script ****** -->
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_resize.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor  maxwait="35" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-resize-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-resize-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>Resize process done!!!</echo>  
  </target>
  
  <target name="web" 
	depends="validate,clean-web,staging,generate-gallery,string-replace, copy-to-build,clean-staging" 
	description="Deletes the web pages, builds the web pages, but no ftp">
  </target>
  <target name="clean-job" description="cleans up all of the build artifacts, returning the directory to its original template state.">
    <delete dir="${staging}"/>
    <delete dir="${build}/${URL}"/>
  </target>
  <target name="clean-staging" description="cleans up all of the build artifacts, returning the directory to its original template state.">
    <delete dir="${staging}"/>
  </target>
  <target name="clean-web" description="cleans up all of the build artifacts, returning the directory to its original template state.">
    <delete dir="${build}/${URL}/webgallery"/>
    <delete file="${build}/${URL}/fullsize_pics.zip"/>
    <delete file="${build}/${URL}/MLS_pics.zip"/>
    <delete file="${build}/${URL}/banner.html"/>
    <delete file="${build}/${URL}/gallery.html"/>
    <delete file="${build}/${URL}/genericIndex.html"/>
    <delete file="${build}/${URL}/simpleGallery.html"/>
    <delete file="${build}/${URL}/index.html"/>
    <delete file="${build}/${URL}/campaignDraft.html"/>
  </target>

  <target name="invoice" depends="validate, make-js-prop-file" description="Creates an invoice PDF with Photoshop and modifies the index.html page">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-invoice-done-xxx.jpg"/>
      <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
          <available file="build_props.jsx"/>
      </waitfor>
	<mkdir dir="build/${URL}"/>
	<!-- ****** Call the JS script via an intermediary cmd file. (a pain, but i can't get Ant to call the javascript directly.) ****** -->
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_invoice.cmd"/>
    </exec>
    <sleep seconds="1"/>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond">
      <available file="build/xxx-invoice-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-invoice-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>invoice done!!!</echo>  
  </target>

  <target name="flyer">
    <antcall target="flyer-make"/>
    <antcall target="flyer-save"/>
  </target>

  <target name="luminosity" depends="validate, make-js-prop-file" description="Create Luminosity layer, for 'lights on' photos.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-done-xxx.jpg" failonerror="false"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
      <available file="build_props.jsx"/>
    </waitfor>
     <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_makeLuminosityLayers.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>luminosity layers done!!!</echo>  
  </target>
  
  <target name="flash" depends="make-js-prop-file" description="Create flash layer, reduce opacity.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-done-xxx.jpg" failonerror="false"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
      <available file="build_props.jsx"/>
    </waitfor>
     <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_makeFlashLayers.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>flash layers done!!!</echo>  
  </target>
  
  <target name="flyer-make" depends="validate, make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-done-xxx.jpg" failonerror="false"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
      <available file="build_props.jsx"/>
    </waitfor>
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_make_flyer.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>flyer done!!!</echo>  
  </target>

  <target name="flyer-campaign" depends="validate, make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-done-xxx.jpg" failonerror="false"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
      <available file="build_props.jsx"/>
    </waitfor>
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_make_flyer_email.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>flyer done!!!</echo>  
  </target>

  
  
  <target name="flyer-make-side2" depends="validate, make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-done-xxx.jpg" failonerror="false"/>
    <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
      <available file="build_props.jsx"/>
    </waitfor>
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_make_flyer_side2.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="5" maxwaitunit="minute" 
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>flyer side 2 done!!!</echo>  
  </target>
  
  
  <target name="flyer-save" depends="make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-save-done-xxx.jpg"/>
      <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
          <available file="build_props.jsx"/>
      </waitfor>
      <exec executable="cmd">
        <arg value="/c"/>
        <arg value="ps_save_flyer.cmd"/>
      </exec>
      <!-- ****** CompleteSignal Listener ****** -->
      <waitfor maxwait="5" maxwaitunit="minute"
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-save-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-save-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>*** Flyer saved. ***</echo>  
  </target>

    <target name="flyer-save-side2" depends="make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="build/xxx-flyer-save-done-xxx.jpg"/>
      <waitfor  maxwait="1" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond" >
          <available file="build_props.jsx"/>
      </waitfor>
      <exec executable="cmd">
        <arg value="/c"/>
        <arg value="ps_save_flyer2.cmd"/>
      </exec>
      <!-- ****** CompleteSignal Listener ****** -->
      <waitfor maxwait="5" maxwaitunit="minute"
               checkevery="500" checkeveryunit="millisecond" >
      <available file="build/xxx-flyer-save-done-xxx.jpg"/>
    </waitfor>
    <delete file="build/xxx-flyer-save-done-xxx.jpg"/>
    <delete file="build_props.jsx"/>
    <echo>*** Flyer side 2 saved. ***</echo>  
  </target>
 
    <target name="flyer-deploy" depends="make-js-prop-file" description="Creates a flyer with Photoshop, saves as a jpeg and a tiff.">
        <replace file="${build}/${URL}/index.html" token='div id="flyer" style="visibility:hidden;"' value='div id="flyer" style="visibility:visible;"'/>
        <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <echo>*** Flyer deployed (HTML link has been made visible on the page). ***</echo>  
    </target>
    
  <target name="generate-gallery">
    <property name="gallery.bat.file" location="galleryStart.cmd"/>
    <exec executable="cmd">
        <arg value="/C"/>
        <arg value="${gallery.bat.file}"/>
    </exec>
  </target>  
  
  <target name="clean-raw" description="Cleans out the raw jpegs and cr2 files from the camera.">
    <input
         message="All data is going to be deleted from ${RAW_PATH}.  Continue?"
         validargs="y,n"
         addproperty="do.delete"
    />
    <condition property="do.abort">
      <equals arg1="n" arg2="${do.delete}"/>
    </condition>
    <fail if="do.abort">Build aborted by user.</fail>
    <delete dir="${RAW_PATH}"/>
  </target>
  
  <target name="clean-resize" description="cleans the build file of the Photoshop Javascript scripts">
    <!-- Delete all directories with "JPEG_" in their names. -->
    <delete includeemptydirs="true" failonerror="false">
		<fileset dir="${RESIZE_PATH}" defaultexcludes="false">
		   <include name="**/*JPEG_*/**" />
		</fileset>
	  <!--<fileset dir="${RESIZE_PATH}/JPEG_640" />
      <fileset dir="${RESIZE_PATH}/JPEG_975" />
      <fileset dir="${RESIZE_PATH}/JPEG_1200" />
      <fileset dir="${RESIZE_PATH}/JPEG_full" />-->
    </delete>
    <delete file="build/xxx-resize-done-xxx.jpg"/>
  </target>

  <target name="clean" 
	depends="clean-web,clean-raw,clean-resize" 
	description="cleans up all of the build artifacts, ps and web artifacts, returning to its original template state.">
  </target>
  
  <target name="raw" depends="make-js-prop-file" description="Calls the Photoshop script.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="xxx-done-xxx.jpg"/>
    <!-- ****** Call the JS script ****** -->
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_processRAW.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="50" maxwaitunit="minute" 
     checkevery="500" checkeveryunit="millisecond" >
      <available file="xxx-done-xxx.jpg"/>
    </waitfor>
    <delete file="xxx-done-xxx.jpg"/>
    <echo>RAW process done!!!</echo>    
  </target>

  <target name="jpeg" depends="make-js-prop-file" description="Calls the Photoshop script.">
    <!-- ****** Stanza to clear any signal file and regenerate the js properties file.****** -->
    <delete file="xxx-done-xxx.jpg"/>
    <!-- ****** Call the JS script ****** -->
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="ps_CR2toJPEG.cmd"/>
    </exec>
    <!-- ****** CompleteSignal Listener ****** -->
    <waitfor maxwait="50" maxwaitunit="minute" 
     checkevery="500" checkeveryunit="millisecond" >
      <available file="xxx-done-xxx.jpg"/>
    </waitfor>
    <delete file="xxx-done-xxx.jpg"/>
    <echo>RAW process done!!!</echo>    
  </target>
  
  <target name="save-props" description="template folder is like the src folder.  To preserve it, all work is done in the staging folder.">
    <copy file="build_props.properties" tofile="build_prop_archive/build_props_${URL}.properties" />
  </target>

  <target name="staging" description="template folder is like the src folder.  To preserve it, all work is done in the staging folder.">
    <copy todir="${staging}">
      <fileset dir="${template}"/>
    </copy>
    <copy todir="${staging}/..">
      <fileset file="${template}/style.css"/>
    </copy>
      <copy todir="${staging}/mlspics">
          <fileset dir="${RESIZE_PATH}/JPEG_1024"/>
      </copy>
      <copy todir="${staging}/webgallery">
          <fileset dir="${RESIZE_PATH}/JPEG_1024"/>
      </copy>
    <copy todir="${staging}/JPEG_full">
      <fileset dir="${RESIZE_PATH}/JPEG_full"/>
    </copy>
  </target>
  
  <target name="string-replace" description="Fills in the template web pages.">

    <tstamp>
       <format property="TODAY" pattern="MMM d, yyyy" locale="en,GB"/>
    </tstamp>

    <replace file="${staging}/index.html" token="_ADDRESS_" value="${ADDRESS}"/>
    <replace file="${staging}/index.html" token="_AGENT_" value="${AGENT}"/>
    <replace file="${staging}/index.html" token="_PHONE_" value="${PHONE}"/>
    <replace file="${staging}/index.html" token="_EMAIL_" value="${EMAIL}"/>
    <replace file="${staging}/index.html" token="_URL_" value="${URL}"/>
    <replace file="${staging}/index.html" token="_FLICKR_" value="${FLICKR}"/>
    <replace file="${staging}/index.html" token="_DATE_" value="${TODAY}"/>
    <replace file="${staging}/index.html" token="_VIDEO_" value="${VIDEO}"/>

    <replace file="${staging}/campaignDraft.html" token="_ADDRESS_" value="${ADDRESS}"/>
    <replace file="${staging}/campaignDraft.html" token="_AGENT_" value="${AGENT}"/>
    <replace file="${staging}/campaignDraft.html" token="_PHONE_" value="${PHONE}"/>
    <replace file="${staging}/campaignDraft.html" token="_EMAIL_" value="${EMAIL}"/>
    <replace file="${staging}/campaignDraft.html" token="_URL_" value="${URL}"/>
    <replace file="${staging}/campaignDraft.html" token="_FLICKR_" value="${FLICKR}"/>
    <replace file="${staging}/campaignDraft.html" token="_DATE_" value="${TODAY}"/>
    <replace file="${staging}/campaignDraft.html" token="_HOUSEPRICE_" value="${HOUSEPRICE}"/>
    <replace file="${staging}/campaignDraft.html" token="_BOXTEXT_" value="${BOXTEXT}"/>
    <replace file="${staging}/campaignDraft.html" token="_MLS_" value="${MLS}"/>

      <replace file="${staging}/gallery.html" token="_ADDRESS_" value="${ADDRESS}"/>
      <replace file="${staging}/gallery.html" token="_AGENT_" value="${AGENT}"/>
      <replace file="${staging}/gallery.html" token="_PHONE_" value="${PHONE}"/>
      <replace file="${staging}/gallery.html" token="_EMAIL_" value="${EMAIL}"/>
      <replace file="${staging}/gallery.html" token="_URL_" value="${URL}"/>
      <replace file="${staging}/gallery.html" token="_FLICKR_" value="${FLICKR}"/>
      <replace file="${staging}/gallery.html" token="_JOB_NAME_" value="${JOB_NAME}"/>
      <replace file="${staging}/gallery.html" token="_DATE_" value="${TODAY}"/>

      <replace file="${staging}/invoice.txt" token="_ADDRESS_" value="${ADDRESS}"/>
      <replace file="${staging}/invoice.txt" token="_AGENT_" value="${AGENT}"/>
      <replace file="${staging}/invoice.txt" token="_PHONE_" value="${PHONE}"/>
      <replace file="${staging}/invoice.txt" token="_EMAIL_" value="${EMAIL}"/>
      <replace file="${staging}/invoice.txt" token="_URL_" value="${URL}"/>
      <replace file="${staging}/invoice.txt" token="_FLICKR_" value="${FLICKR}"/>
      <replace file="${staging}/invoice.txt" token="_JOB_NAME_" value="${JOB_NAME}"/>
      <replace file="${staging}/invoice.txt" token="_DATE_" value="${TODAY}"/>
  </target>

  <target name="copy-to-build">
    <copy todir="${build}/${URL}">
      <fileset file="${staging}/index.html"/>
      <fileset file="${staging}/campaignDraft.html"/>
      <fileset file="${staging}/gallery.html"/>
      <fileset file="${staging}/logobanner.jpg"/>
      <fileset file="${staging}/logo.jpg"/>
      <fileset file="${props}"/>
    </copy>
      <copy todir="${build}/${URL}/webgallery">
          <fileset dir="${staging}/webgallery"/>
      </copy>
      <zip destfile="${build}/${URL}/MLS_pics.zip">
          <zipfileset dir="${staging}/mlspics"> <!--  todo:  prefix="${URL}_MLS_pics"  -->
          </zipfileset>
      </zip>
      <zip destfile="${build}/${URL}/fullsize_pics.zip">
          <zipfileset dir="${staging}/JPEG_full"/> <!--   prefix="${URL}_fullsize_pics"  -->
      </zip>
  </target>

<target name="email">
  <mail 
   mailhost="smtp.gmail.com" 
   mailport="465" 
   subject="Your pictures are ready: ${ADDRESS}"
   ssl="true" 
   user="stevelukehanson@gmail.com" 
   password="ar!st0tle"
   messagefile="template/mail.txt"
   >
    <!--<to address="${EMAIL}"/>-->
    <to address="stevelukehanson@gmail.com"/>    
    <from address="stevelukehanson@gmail.com"/>
    <replyto address="stevelukehanson@gmail.com"/>
    <bcc address="stevelukehanson@gmail.com"/>
    <!--<message>Pictures are available at:  http://www.nwhomephoto.com/virtualMediaGalleries/${URL}</message>-->
    <!--<attachments>
      <fileset dir="${build}/${URL}/webgallery/album/medium/">
        <include name="0001.jpg"/>
      </fileset>
    </attachments>-->
  </mail>
</target>

<target name="devenv" depends="make-js-prop-file">
</target>

<target name="make-js-prop-file">
    <!-- string replace into the js property file template -->
    <!-- Delete the old js prop file -->
    <delete file="build_props.jsx"/>    
    <!-- Stamp out new one from the template-->
    <!--<touch file="build_props.jsx"/> -->
    <copy todir="." overwrite="yes">
      <fileset file="templates_js/build_props.jsx"/>
    </copy>
    <!-- Modify it with string replacement -->
    <replace file="build_props.jsx" token="ROOTPATH" value="${ROOT_PATH}"/>
    <replace file="build_props.jsx" token="URL" value="${URL}"/>
    <replace file="build_props.jsx" token="BUILDPATH" value="${basedir}/${build}"/>
    <replace file="build_props.jsx" token="ADDRESS" value="${ADDRESS}"/>
    <replace file="build_props.jsx" token="RAWPATH" value="${RAW_PATH}"/>
    <replace file="build_props.jsx" token="RESIZEPATH" value="${RESIZE_PATH}"/>
    <replace file="build_props.jsx" token="SRCPATH" value="${SRC_PATH}"/>
    <replace file="build_props.jsx" token="LUMINOSITYPATH" value="${LUMINOSITY_PATH}"/>
    <replace file="build_props.jsx" token="FLASHPATH" value="${FLASH_PATH}"/>
    <replace file="build_props.jsx" token="AGENT" value="${AGENT}"/>
    <replace file="build_props.jsx" token="PHONE" value="${PHONE}"/>
    <replace file="build_props.jsx" token="EMAIL" value="${EMAIL}"/>
    <replace file="build_props.jsx" token="FLICKR" value="${FLICKR}"/>
    <tstamp>
      <format property="INVOICE" pattern="yyMMdd" locale="en,GB"/>
    </tstamp>
    <replace file="build_props.jsx" token="INVOICENUMBER" value="${INVOICE}"/>
    <replace file="build_props.jsx" token="JOBNAME" value="${JOBNAME}"/>
    <tstamp>
      <format property="TODAY_GB" pattern="MMM d, yyyy" locale="en,GB"/>
    </tstamp>
    <!--<replace file="build_props.jsx" token="DATE" value="${TODAY_GB}"/>-->
    <replace file="build_props.jsx" token="VIDEO" value="${VIDEO}"/>
    <replace file="build_props.jsx" token="DATE" value="${DATE}"/>
    <replace file="build_props.jsx" token="SHOOTPRICE" value="${SHOOTPRICE}"/>
    <replace file="build_props.jsx" token="HEADLINE1" value="${HEADLINE1}"/>
    <replace file="build_props.jsx" token="HEADLINE2" value="${HEADLINE2}"/>
    <replace file="build_props.jsx" token="HEADLINE3" value="${HEADLINE3}"/>
    <replace file="build_props.jsx" token="PHOTO1" value="${PHOTO1}"/>
    <replace file="build_props.jsx" token="PHOTO2" value="${PHOTO2}"/>
    <replace file="build_props.jsx" token="PHOTO3" value="${PHOTO3}"/>
    <replace file="build_props.jsx" token="PHOTO4" value="${PHOTO4}"/>
    <replace file="build_props.jsx" token="PHOTO5" value="${PHOTO5}"/>
    <replace file="build_props.jsx" token="LOGO" value="${LOGO}"/>
    <replace file="build_props.jsx" token="MLS" value="${MLS}"/>
    <replace file="build_props.jsx" token="MAINTEXT" value="${MAINTEXT}"/>
    <replace file="build_props.jsx" token="BOXTEXT" value="${BOXTEXT}"/>
    <replace file="build_props.jsx" token="HOUSEPRICE" value="${HOUSEPRICE}"/>
    <replace file="build_props.jsx" token="CONTACT" value="${CONTACT}"/>
    <replace file="build_props.jsx" token="WEBSITE" value="${WEBSITE}"/>
    <replace file="build_props.jsx" token="PRESENTEDBY" value="${PRESENTEDBY}"/>
    <replace file="build_props.jsx" token="PHOTOGRAPHERNAME" value="${PHOTOGRAPHER_NAME}"/>
    <replace file="build_props.jsx" token="PHOTOGRAPHERADDR1" value="${PHOTOGRAPHER_ADDR_1}"/>
    <replace file="build_props.jsx" token="PHOTOGRAPHERADDR2" value="${PHOTOGRAPHER_ADDR_2}"/>
    <replace file="build_props.jsx" token="PHOTOGRAPHERE" value="${PHOTOGRAPHER_E}"/>
    <replace file="build_props.jsx" token="PHOTOGRAPHERPH" value="${PHOTOGRAPHER_PH}"/>
    <replace file="build_props.jsx" token="\" value="/"/>
</target>

<target name="sql">
  <sql
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://localhost:5432/externalsteve"
    userid="postgres"
    password="sa"
    print="yes" 
    classpathref="antclasspath">
     -- SELECT * from photolab.jobs;
     DELETE FROM photolab.jobs; 
  </sql>
  <foreach target="bar" param="theFile">
   <path>
    <fileset dir="C:\Users\SteveH\Documents\nwhomephoto\properties" casesensitive="yes">
      <include name="**/*.txt"/>
      <include name="**/*.properties"/>
<!--
      <include name="*.txt"/>
      <include name="*.properties"/>
-->
	  </fileset>
   </path>
  </foreach>
  <exec executable="cmd.exe" os="Windows 2000,Windows NT,Windows XP,Windows 7,Windows 10" >
    <arg line="/C start chrome 'http://localhost:8080/labkey/Photolab/project-begin.view?'" />
  </exec>
  
</target>

<target name="bar">
  <echo message="${theFile}"/>
  <antcall target="sqlinsert">
    <param name="props" value="${theFile}"/>
  </antcall>
</target> 
 
<!-- Experimental SQL Insert -->
<target name="sqlinsert">

  <sql
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://localhost:5432/externalsteve"
    userid="postgres"
    password="sa"
    print="yes" 
    classpathref="antclasspath">
     INSERT INTO photolab.jobs ( 
								url, 
								address, 
								agent,
								shootprice,
								agentphone,
								agentemail,
								date
								) 
							VALUES (
								'${URL}', 
								'${ADDRESS}', 
								'${AGENT}',
								'${SHOOTPRICE}',
								'${PHONE}',
								'${EMAIL}',
								'${DATE}'
								)

        -- select * from core.Users 
        -- INSERT INTO core.Users (email) VALUES ('myemail@email.com')
        -- select * from core.Containers 
  </sql>
</target>

</project>
